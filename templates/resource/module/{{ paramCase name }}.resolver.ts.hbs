import { Mutation, Parent, Query, ResolveField, Resolver } from '@nestjs/graphql';
import { ActorContext } from 'src/actor-context/ActorContext';
import { ResolveActorContext } from 'src/actor-context/resolvers/ResolveActorContext';
import { GenericListInputType, GenericListInputZod } from 'src/meilisearch/dtos';
import { ValidatedArgs } from '../../../graphql/ValidatedArgs.decorator';
import { {{ pascalCase name }}Service } from './{{ paramCase name }}.service';
import { {{ pascalCase name }}Type } from './{{ paramCase name }}.type';
import {
  Create{{ pascalCase name }}InputType,
  Create{{ pascalCase name }}InputZod,
  Delete{{ pascalCase name }}InputType,
  Delete{{ pascalCase name }}InputZod,
  Find{{ pascalCase name }}ByIdInputType,
  Find{{ pascalCase name }}ByIdInputZod,
  List{{ pascalCase name }}ResultType,
  Update{{ pascalCase name }}InputType,
  Update{{ pascalCase name }}InputZod,
} from './dtos';

@Resolver(() => {{ pascalCase name }}Type)
export class {{ pascalCase name }}Resolver {
  constructor(private {{ camelCase name }}Service: {{ pascalCase name }}Service) {}

  // START: queries

  @Query(() => {{ pascalCase name }}Type)
  async find{{ pascalCase name }}ById(
    @ResolveActorContext()
    actorContext: ActorContext,
    @ValidatedArgs('dto', Find{{ pascalCase name }}ByIdInputZod)
    dto: Find{{ pascalCase name }}ByIdInputType,
  ) {
    return this.{{ camelCase name }}Service.find{{ pascalCase name }}ByIdStrict(actorContext, dto);
  }

  @Query(() => List{{ pascalCase name }}ResultType)
  async list{{ pascalCase name }}(
    @ResolveActorContext()
    actorContext: ActorContext,
    @ValidatedArgs('dto', GenericListInputZod)
    dto: GenericListInputType,
  ) {
    return this.{{ camelCase name }}Service.list{{ pascalCase name }}(actorContext, dto);
  }

  // END: queries

  // START: mutations

  @Mutation(() => {{ pascalCase name }}Type)
  async create{{ pascalCase name }}(
    @ResolveActorContext()
    actorContext: ActorContext,
    @ValidatedArgs('dto', Create{{ pascalCase name }}InputZod)
    dto: Create{{ pascalCase name }}InputType,
  ) {
    return this.{{ camelCase name }}Service.create{{ pascalCase name }}(actorContext, dto);
  }

  @Mutation(() => {{ pascalCase name }}Type)
  async update{{ pascalCase name }}(
    @ResolveActorContext()
    actorContext: ActorContext,
    @ValidatedArgs('dto', Update{{ pascalCase name }}InputZod)
    dto: Update{{ pascalCase name }}InputType,
  ) {
    return this.{{ camelCase name }}Service.update{{ pascalCase name }}(actorContext, dto);
  }

  @Mutation(() => Boolean)
  async delete{{ pascalCase name }}(
    @ResolveActorContext()
    actorContext: ActorContext,
    @ValidatedArgs('dto', Delete{{ pascalCase name }}InputZod)
    dto: Delete{{ pascalCase name }}InputType,
  ) {
    return this.{{ camelCase name }}Service.delete{{ pascalCase name }}(actorContext, dto);
  }

  // END: mutations

  // START: fields resolvers

  @ResolveField('field', () => String)
  async field(
    @ResolveActorContext()
    actorContext: ActorContext,
    @Parent() parent: {{ pascalCase name }}Type,
  ) {
    return this.{{ camelCase name }}Service.get{{ pascalCase name }}Field(actorContext, parent.id);
  }

  // 

  // @ResolveField('dateCreated', () => Date)
  // async dateCreated(
  //   @ResolveActorContext()
  //   actorContext: ActorContext,
  //   @Parent() parent: {{ pascalCase name }}Type,
  // ) {
  //   return this.{{ camelCase name }}Service.get{{ pascalCase name }}DateCreated(actorContext, parent.id);
  // }

  // @ResolveField('dateUpdated', () => Date)
  // async dateUpdated(
  //   @ResolveActorContext()
  //   actorContext: ActorContext,
  //   @Parent() parent: {{ pascalCase name }}Type,
  // ) {
  //   return this.{{ camelCase name }}Service.get{{ pascalCase name }}DateUpdated(actorContext, parent.id);
  // }

  // @ResolveField('dateDeleted', () => Date, { nullable: true })
  // async dateDeleted(
  //   @ResolveActorContext()
  //   actorContext: ActorContext,
  //   @Parent() parent: {{ pascalCase name }}Type,
  // ) {
  //   return this.{{ camelCase name }}Service.get{{ pascalCase name }}DateDeleted(actorContext, parent.id);
  // }

  // @ResolveField('dateSearchSync', () => Date, { nullable: true })
  // async dateSearchSync(
  //   @ResolveActorContext()
  //   actorContext: ActorContext,
  //   @Parent() parent: {{ pascalCase name }}Type,
  // ) {
  //   return this.{{ camelCase name }}Service.get{{ pascalCase name }}DateSearchSync(actorContext, parent.id);
  // }

  // END: fields resolvers
}
