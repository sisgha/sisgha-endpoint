import { Injectable, NotFoundException } from '@nestjs/common';
import { omit } from 'lodash';
import { ActorContext } from 'src/actor-context/ActorContext';
import { APP_RESOURCE_{{ constantCase name }} } from 'src/actor-context/providers';
import { ContextAction } from 'src/authorization/interfaces';
import { IGenericListInput } from 'src/meilisearch/dtos';
import { MeiliSearchService } from 'src/meilisearch/meilisearch.service';
import { FindOneOptions } from 'typeorm';
import { {{ pascalCase name }}DbEntity } from '../../../database/entities/{{ camelCase name }}.db.entity';
import { get{{ pascalCase name }}Repository } from '../../../database/repositories/{{ camelCase name }}.repository';
import { {{ pascalCase name }}Type } from './{{ camelCase name }}.type';
import { ICreate{{ pascalCase name }}Input, IDelete{{ pascalCase name }}Input, IFind{{ pascalCase name }}ByIdInput, IUpdate{{ pascalCase name }}Input, List{{ pascalCase name }}ResultType } from './dtos';

@Injectable()
export class {{ pascalCase name }}Service {
  constructor(
    // ...
    private meilisearchService: MeiliSearchService,
  ) {}

  // ...

  async find{{ pascalCase name }}ById(actorContext: ActorContext, dto: IFind{{ pascalCase name }}ByIdInput, options: FindOneOptions<{{ pascalCase name }}DbEntity> | null = null) {
    const target{{ pascalCase name }} = await actorContext.databaseRun(async ({ entityManager }) => {
      const {{ camelCase name }}Repository = get{{ pascalCase name }}Repository(entityManager);

      return {{ camelCase name }}Repository.findOne({
        where: { id: dto.id },
        select: ['id'],
        cache: 20,
      });
    });

    if (!target{{ pascalCase name }}) {
      return null;
    }

    const {{ camelCase name }} = await actorContext.databaseRun(async ({ entityManager }) => {
      const {{ camelCase name }}Repository = get{{ pascalCase name }}Repository(entityManager);

      return {{ camelCase name }}Repository.findOneOrFail({
        where: { id: target{{ pascalCase name }}.id },
        select: ['id'],
        ...options,
      });
    });

    return actorContext.readResource(APP_RESOURCE_{{ constantCase name }}, {{ camelCase name }});
  }

  async find{{ pascalCase name }}ByIdStrict(actorContext: ActorContext, dto: IFind{{ pascalCase name }}ByIdInput, options: FindOneOptions<{{ pascalCase name }}DbEntity> | null = null) {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ById(actorContext, dto, options);

    if (!{{ camelCase name }}) {
      throw new NotFoundException();
    }

    return {{ camelCase name }};
  }

  async find{{ pascalCase name }}ByIdStrictSimple<T = Pick<{{ pascalCase name }}DbEntity, 'id'>>(actorContext: ActorContext, {{ camelCase name }}Id: number): Promise<T> {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdStrict(actorContext, { id: {{ camelCase name }}Id });
    return <T>{{ camelCase name }};
  }

  //

  async list{{ pascalCase name }}(actorContext: ActorContext, dto: IGenericListInput): Promise<List{{ pascalCase name }}ResultType> {
    const allowedIds = await actorContext.getAllowedResourcesIdsForResourceAction(APP_RESOURCE_{{ constantCase name }}, ContextAction.READ);

    const result = await this.meilisearchService.listResource<{{ pascalCase name }}Type>(APP_RESOURCE_{{ constantCase name }}, dto, allowedIds);

    return {
      ...result,
    };
  }

  // ...

  async get{{ pascalCase name }}StrictGenericField<K extends keyof {{ pascalCase name }}DbEntity>(
    actorContext: ActorContext,
    {{ camelCase name }}Id: number,
    field: K,
  ): Promise<{{ pascalCase name }}DbEntity[K]> {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdStrict(actorContext, { id: {{ camelCase name }}Id }, { select: ['id', field] });
    return <{{ pascalCase name }}DbEntity[K]>{{ camelCase name }}[field];
  }

  //

  async get{{ pascalCase name }}Field(actorContext: ActorContext, {{ camelCase name }}Id: number) {
    return this.get{{ pascalCase name }}StrictGenericField(actorContext, {{ camelCase name }}Id, 'field');
  }

  // 

  // async get{{ pascalCase name }}DateCreated(actorContext: ActorContext, {{ camelCase name }}Id: number) {
  //   return this.get{{ pascalCase name }}StrictGenericField(actorContext, {{ camelCase name }}Id, 'dateCreated');
  // }

  // async get{{ pascalCase name }}DateUpdated(actorContext: ActorContext, {{ camelCase name }}Id: number) {
  //   return this.get{{ pascalCase name }}StrictGenericField(actorContext, {{ camelCase name }}Id, 'dateUpdated');
  // }

  // async get{{ pascalCase name }}DateDeleted(actorContext: ActorContext, {{ camelCase name }}Id: number) {
  //   return this.get{{ pascalCase name }}StrictGenericField(actorContext, {{ camelCase name }}Id, 'dateDeleted');
  // }

  // async get{{ pascalCase name }}DateSearchSync(actorContext: ActorContext, {{ camelCase name }}Id: number) {
  //   return this.get{{ pascalCase name }}StrictGenericField(actorContext, {{ camelCase name }}Id, 'dateSearchSync');
  // }

  // ...

  async create{{ pascalCase name }}(actorContext: ActorContext, dto: ICreate{{ pascalCase name }}Input) {
    const fieldsData = omit(dto, []);

    const {{ camelCase name }} = <{{ pascalCase name }}DbEntity>{
      ...fieldsData,
    };

    await actorContext.ensurePermission(APP_RESOURCE_{{ constantCase name }}, ContextAction.CREATE, {{ camelCase name }});

    const db{{ pascalCase name }} = await actorContext.databaseRun(async ({ entityManager }) => {
      const {{ camelCase name }}Repository = get{{ pascalCase name }}Repository(entityManager);
      await {{ camelCase name }}Repository.save({{ camelCase name }});
      return <{{ pascalCase name }}DbEntity>{{ camelCase name }};
    });

    return this.find{{ pascalCase name }}ByIdStrictSimple(actorContext, db{{ pascalCase name }}.id);
  }

  async update{{ pascalCase name }}(actorContext: ActorContext, dto: IUpdate{{ pascalCase name }}Input) {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdStrictSimple(actorContext, dto.id);

    const fieldsData = omit(dto, ['id']);

    const updated{{ pascalCase name }} = <{{ pascalCase name }}DbEntity>{
      ...{{ camelCase name }},
      ...fieldsData,
    };

    await actorContext.ensurePermission(APP_RESOURCE_{{ constantCase name }}, ContextAction.UPDATE, updated{{ pascalCase name }});

    await actorContext.databaseRun(async ({ entityManager }) => {
      const {{ camelCase name }}Repository = get{{ pascalCase name }}Repository(entityManager);
      await {{ camelCase name }}Repository.save(updated{{ pascalCase name }});
      return <{{ pascalCase name }}DbEntity>updated{{ pascalCase name }};
    });

    return this.find{{ pascalCase name }}ByIdStrictSimple(actorContext, {{ camelCase name }}.id);
  }

  async delete{{ pascalCase name }}(actorContext: ActorContext, dto: IDelete{{ pascalCase name }}Input) {
    const {{ camelCase name }} = await this.find{{ pascalCase name }}ByIdStrictSimple(actorContext, dto.id);

    await actorContext.ensurePermission(APP_RESOURCE_{{ constantCase name }}, ContextAction.DELETE, {{ camelCase name }});

    return actorContext.databaseRun(async ({ entityManager }) => {
      const {{ camelCase name }}Repository = get{{ pascalCase name }}Repository(entityManager);

      await {{ camelCase name }}Repository
        .createQueryBuilder('{{ camelCase name }}')
        .update()
        .set({
          dateDeleted: new Date(),
        })
        .where('id = :id', { id: {{ camelCase name }}.id })
        .execute();
    });
  }
}
